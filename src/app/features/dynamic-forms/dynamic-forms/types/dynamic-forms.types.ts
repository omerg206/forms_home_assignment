import { FormlyFieldConfig, FormlyTemplateOptions } from '@ngx-formly/core';

// Generated by https://quicktype.io

export interface FormsTypeSchema {
  result: Result;
}

export interface Result {
  schemasList: SchemasList[];
}

export interface SchemasList {
  type: string;
  display: string;
}

export interface SelectionOption {
  value: string, label: string
}

export interface FormDetailsFromServer {
  [key: string]: FormPropertiesFromServer | FormDetailsFromServer
}


export interface FormPropertiesFromServer {
  type: ServerInputsTypes;
  require?: boolean;
  enumValues?: string[];
  value?: boolean;
}

export type ServerInputsTypes = 'String' | 'Date' | 'Enum' | 'Boolean';

export type FormInputsTypes = 'input' | 'datepicker' | 'select' | 'checkbox';

export interface ServerFromDetailsSchemaPropValue {
  [key: string]: string | ServerFromDetailsSchemaPropValue
}

export interface ServerFormDetailsResponse {
  succeeded: boolean;
  result: { scheme: ServerFromDetailsSchemaPropValue }

}

export interface SubmitDataToServer {
  type: string,
  form: object
}


export type AllInputFieldDefaultOptions = {
  [key in ServerInputsTypes]: DefaultFormFiledOptions;
};

export interface DefaultFormFiledOptions  {
  type: FormInputsTypes,
  templateOptions: FormlyTemplateOptions;
};

export interface ParseSchemaFormServerParams {
  scheme: ServerFromDetailsSchemaPropValue
  groupName: string,
  parsedDetails: FormlyFieldConfig[] ;
   currentParsedDetails: FormlyFieldConfig[];

}

export interface FormSubmissionState {
  isSubmittingInProgress: boolean, isSubmitSuccess: boolean, isSubmitFail: boolean
}

export interface GetDateFromServerState {
  isDataFetchingInProgress: boolean, isError: boolean,
}


/// can be made better with Generic types

